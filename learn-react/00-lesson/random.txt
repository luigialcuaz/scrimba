1. Why do we need to `import React from "react"` in our files?
  React defines JSX. Otherwise, jsk would return a js object

2. If I were to console.log(page) in index.js, what would show up?
  A JavaScript object. React elements that describe what React should
  eventually add to the real DOM for us.

4. What does it mean for something to be "declarative" instead of "imperative"?
  Declarative means I can tell the computer WHAT to do 
  and expect it to handle the details. Imperative means I need
  to tell it HOW to do each step.

5. What does it mean for something to be "composable"?
  We have small pieces that we can put together to make something
  larger/greater than the individual pieces.

1. What is a React component?
  cdA function that returns React elements. (UI)

1. What do props help us accomplish?
  Make a component more reusable.

2. How do you pass a prop into a component?
<MyAwesomeHeader title="???" />

3. Can I pass a custom prop (e.g. `blahblahblah={true}`) to a native
   DOM element? (e.g. <div blahblahblah={true}>) Why or why not?
No, because the JSX we use to describe native DOM elements will
be turned into REAL DOM elements by React. And real DOM elements
only have the prooperties/attributes specified in the HTML specification.
(Which doesn't include properties like `blahblahblah`)

4. How do I receive props in a component?
function Navbar(props) {
    return (
        <header>
            ...
        </header>
    )
}

5. What data type is `props` when the component receives it?
An object!

CONDITIONAL RENDERING

<div>
    {props.setup && <h3>Setup: {props.setup}</h3>}
    <p>Punchline: {props.punchline}</p>
    <hr />
</div>
- If props.setup exists, render the right side of the equation

<div>
    <h3 style={{display: props.setup ? "block" : "none"}}>Setup: {props.setup}</h3>
    <p>Punchline: {props.punchline}</p>
    <hr />
</div>
-another way to do it

1. What does the `.map()` array method do?
Returns a new array. Whatever gets returned from the callback
function provided is placed at the same index in the new array.
Usually we take the items from the original array and modify them
in some way.

2. What do we usually use `.map()` for in React?
Convert an array of raw data into an array of JSX elements
that can be displayed on the page.

3. Why is using `.map()` better than just creating the components
   manually by typing them out?
It makes our code more "self-sustaining" - not requiring
additional changes whenever the data changes.

1. How would you describe the concept of "state"?
A way for React to remember saved values from within a component.
This is similar to declaring variables from within a component,
with a few added bonuses (which we'll get to later)


2. When would you want to use props instead of state?
Anytime you want to pass data into a component so that
component can determine what will get displayed on the
screen.


3. When would you want to use state instead of props?
Anytime you want a component to maintain some values from
within the component. (And "remember" those values even
when React re-renders the component).


4. What does "immutable" mean? Are props immutable? Is state immutable?
Unchanging. Props are immutable. State is mutable.

Best practice

    const [count, setCount] = React.useState(0)

    function add() {
        setCount(prevCount => prevCount + 1)
    }
- to update state

1. You have 2 options for what you can pass in to a
   state setter function (e.g. `setCount`). What are they?
   
a. New value of state (setCount(42))
b. Callback function - whatever the callback function 
   returns === new value of state


2. When would you want to pass the first option (from answer
   above) to the state setter function?
Whenever you don't need the previous value of state to determine
what the new value of state should be.


3. When would you want to pass the second option (from answer
   above) to the state setter function?
Whenever you DO need the previous value to determine the new value

whenever state changes, the component where the state exists is re rendered and any child components that may rely on state to be working correctly

if you find yourself initializing state using incoming props, there is probably a better way to structure your code (derived state)

conditonal rendering

if(cond1 && console.log("Hello there")) {
    // this code will run
}

if cond1 is true, the 2nd part runs, if its false, the computer skips whatever code is next

Forms 
use onChange to listen to changes in the form
- handle change receives an event object that has many properties
- most important is the target property which gives the DOM object that triggered the event
- event.target.value holds the text inputted by the user

give form inputs a name property
- match property value to the same name as the matching state
- now have access to event.target.name
- using that however produces a syntax error when updating state as a new object
- use computed properties, surround key in square brackets.
  - makes a dynamic string, something saved in a variable and use it as the property name of an object

Textarea
- self closing element
- value is what is inside, the area
- everything else is the same as a text based input, no type

Controlled inputs
- set value property to equal your state
value={formData.email}
- input otherwise will hold its own state 
- value is no longer being controller by the input, but by react
- an uncontrolled component otherwise. (react will complain)

Checkbox
- type="checkbox"
- boolean type, uses checked as its value
checked={formData.isFriendly}
- has an id that connects the htmlFor property of a label
<input 
    type="checkbox" 
    id="isFriendly" 
    checked={formData.isFriendly}
/>
<label htmlFor="isFriendly">Are you friendly?</label>
- htmlFor in js, for in html

function handleChange(event) {
    const {name, value, type, checked} = event.target
    setFormData(prevFormData => {
        return {
            ...prevFormData,
            [name]: type === "checkbox" ? checked : value
        }
    })
}

how to handle the checkbox even while handling everything else from the form

Radio buttons
- in react, a combination of checkboxes and inputs
function handleChange(event) {
    const {name, value, type, checked} = event.target
    setFormData(prevFormData => {
        return {
            ...prevFormData,
            [name]: type === "checkbox" ? checked : value
        }
    })
}

<input 
    type="radio"
    id="part-time"
    name="employment"
    value="part-time"
    checked={formData.employment === "part-time"}
    onChange={handleChange}
/>
<label htmlFor="part-time">Part-time</label>
- has text value in state
- when a button is checked, it will take the value stored in that radio button and set the state to that value
- add a name value to each button
  - the same name for each button since each respresent that one property ex: employment: unemployed/partime/fulltime
  - assigning name also makes it so only button can be checked at a time
- use the checked value to control the component.
  - checked is a boolean value, employment is not so use equality operator with value to turn it into a boolean value

Select & option
- in html looks like this
<select id="favColor">
    <option value="red">Red</option>
    <option value="orange">Orange</option>
    <option value="yellow">Yellow</option>
    <option value="green">Green</option>
</select>
- you would look for a property "selected"
- react makes it like the other form inputs 
<label htmlFor="favColor">What is your favorite color?</label>
<br />
<select 
    id="favColor"
    value={formData.favColor}
    onChange={handleChange}
    name="favColor"
>
    <option value="">-- Choose --</option>
    <option value="red">Red</option>
    <option value="orange">Orange</option>
    <option value="yellow">Yellow</option>
    <option value="green">Green</option>
    <option value="blue">Blue</option>
    <option value="indigo">Indigo</option>
    <option value="violet">Violet</option>
</select>
- value equals the state equivalent (controlled input) 
- onChange equals the same as other inputs
- name equals the same state name

Submitting the form

<input type="submit" value="Submit" />

- used to be like this but in html5
- if a button is found inside a form it acts like a submit button

<button>Submit</button> == <input type="submit" value="Submit" />

- button type is automatically "submit", would need to change it to "button" if you don't want it to act as the submit option
- button inside the form will trigger the form's onSubmit event handler

function handleSubmit(event) {
    event.preventDefault()
}

<form onSubmit={handleSubmit}>

-preventDefault wont refresh page and rerender app
-will refresh and remove inputs otherwise, url will be updated with values inputted (/index.html?firstName=lui&lastName=alc etc. etc.

EMAIL REQUIRES A @{a-z} TO BE SUBMITTED

React.useEffect() 
- has a mandatory parameter (function) and an optional parameter ([dependencies]), but will almost always include
- the function acts a place for us to put our side effects code.
    - ex, fetch request is considered a side effect because it is reaching outside of reacts ecosystem but also trying to set some state in the process

React.useEffect(function() {
    fetch("https://swapi.dev/api/people/1")
        .then(res => res.json())
        .then(data => setStarWarsData(data))
}, [])

- anything in useEffect() is guaranteed to run only after the user interface is on the screen
- the dependencies array limits the number of times useEffect will run, it determines when it will run instead of after every single render
- an empty array [] tells react we want to run useEffect on the very first render of the component but then there are no dependencies to watch and trigger this effect to run again
- so it runs once when the component first loads then never again

[count]

- every time count changes react will run useEffect.
- at every re render, React compares counts previous value to its current value
- if last render count was 0 and is now 1, run useEffect

1. What is a "side effect" in React? What are some examples?
- Any code that affects an outside system.
- local storage, API, websockets, two states to keep in sync


2. What is NOT a "side effect" in React? Examples?
- Anything that React is in charge of.
- Maintaining state, keeping the UI in sync with the data, 
  render DOM elements


3. When does React run your useEffect function? When does it NOT run
   the effect function?
- As soon as the component loads (first render)
- On every re-render of the component (assuming no dependencies array)
- Will NOT run the effect when the values of the dependencies in the
  array stay the same between renders


4. How would you explain what the "dependecies array" is?
- Second paramter to the useEffect function
- A way for React to know whether it should re-run the effect function

useEffect Side effects

React.useEffect(() => {
    function watchWidth() {
        console.log("Setting up...")
        setWindowWidth(window.innerWidth)
    }
    
    window.addEventListener("resize", watchWidth)
    
    return function() {
        console.log("Cleaning up...")
        window.removeEventListener("resize", watchWidth)
    }
}, [])

- add a return function clean up side effects
- when the component is unmounted from the DOM, the eventlistener set up on the window registered with the browser, is not automatically removed
- this causes a memory leaked and needs a return function that removes the event listener.
- this is called the useEffect cleanup

async function in useEffect
React.useEffect(() => {
    async function getMemes() {
        const res = await fetch("https://api.imgflip.com/get_memes")
        const data = await res.json()
        setAllMemes(data.data.memes)
    }
    getMemes()
}, [])

- automatically returns a promise instead of a function or nothing
- therefore if you want to use async operations inside of useEffect, you need to define the function separately inside of the callback func as seen below.

Using local storage
localStorage.getItem("key")
localStorage.setItem("key", value)

- value must be a string so if you have to save a more complex value, need to stringify the item

JSON.stringify(value)
JSON.(stringifiedValue)

Lazy State Initialization

const [notes, setNotes] = React.useState(
    JSON.parse(localStorage.getItem("notes")) || []
)

- theres a problem here
- when react re renders every time state changes, its runs the code again
- it ignores whatever state we are re-initializing but it still runs code again
- if it was a console log, it would log every single key stroke if we are using that for state, so in this case it is going into local storage and extracting again and again but ignoring reinitialization of the state.

- make it run only once through lazy state Initialization

const [notes, setNotes] = React.useState(
    JSON.parse(() => localStorage.getItem("notes")) || []
)

- put the code inside a function

EVENT handler

- BY default whatever function we pass to an event handler will receive the event as its parameter
- to pass something along with that, use .bind OR (event) => props.deleteNote(event, note.id)

onClick={(event) => props.deleteNote(event, note.id)}