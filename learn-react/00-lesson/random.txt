1. Why do we need to `import React from "react"` in our files?
  React defines JSX. Otherwise, jsk would return a js object

2. If I were to console.log(page) in index.js, what would show up?
  A JavaScript object. React elements that describe what React should
  eventually add to the real DOM for us.

4. What does it mean for something to be "declarative" instead of "imperative"?
  Declarative means I can tell the computer WHAT to do 
  and expect it to handle the details. Imperative means I need
  to tell it HOW to do each step.

5. What does it mean for something to be "composable"?
  We have small pieces that we can put together to make something
  larger/greater than the individual pieces.

1. What is a React component?
  cdA function that returns React elements. (UI)

1. What do props help us accomplish?
  Make a component more reusable.

2. How do you pass a prop into a component?
<MyAwesomeHeader title="???" />

3. Can I pass a custom prop (e.g. `blahblahblah={true}`) to a native
   DOM element? (e.g. <div blahblahblah={true}>) Why or why not?
No, because the JSX we use to describe native DOM elements will
be turned into REAL DOM elements by React. And real DOM elements
only have the prooperties/attributes specified in the HTML specification.
(Which doesn't include properties like `blahblahblah`)

4. How do I receive props in a component?
function Navbar(props) {
    return (
        <header>
            ...
        </header>
    )
}

5. What data type is `props` when the component receives it?
An object!

CONDITIONAL RENDERING

<div>
    {props.setup && <h3>Setup: {props.setup}</h3>}
    <p>Punchline: {props.punchline}</p>
    <hr />
</div>
- If props.setup exists, render the right side of the equation

<div>
    <h3 style={{display: props.setup ? "block" : "none"}}>Setup: {props.setup}</h3>
    <p>Punchline: {props.punchline}</p>
    <hr />
</div>
-another way to do it