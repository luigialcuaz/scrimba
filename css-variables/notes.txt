css-variables 

Whenever you css values are being reused, it is a perfect time to start using css-variables

decide which scope we want our variable to live in

:root {
  --red: #ff6f69;
  --beige: #ffeead;
  --yellow: #ffcc5c;
}

a pseudo class that points to the root element of our document (the html element itself in many cases)
declaring it here will make them global variables, available through the entire app

html,
body {
  background: var(--beige);
  color: var(--red);
}

using requires var() with variable inside the parenthesis

---Overriding variables

.item {
    --red: #ff8e69;
    background: var(--yellow);
}

global variables in the root are passed onto its children. we can override those variables by assigning the same variable a different value. the new value is then passed onto its child elements but the app will use the same value assigned by the root outside of the parent element where the global variable was overridden

---Local Variables 

.item {
  --item-yellow: #fffc5c;
  background: var(--item-yellow);
}

depending on preference, we can also separate the declaration and reference

.item {
  --item-yellow: #fffc5c;
}

.item {
  background: var(--item-yellow);
}

like this

---Theming

<div class="item">
    <h1>project a</h1>
    <button>learn more</button>
</div>

by changing the div class to "item featured" and adding to the css file

.featured {
     --yellow: #ffe55b;
     --red: #ff5564;   
}